var SelectList = require('../../components/SelectList');
var CheckBox = require('../../components/CheckBox');
var SwipeLi = require('../../components/SwipeLi');
var TaskHandle = require('../../handle/teamwork/Task');
var ModuleManage = require('../Manage');

module.exports = React.createClass({
	goto: function() {
		Utils.setUrl('/module2');
		ModuleManage.getModule('module2', function(Virtual) {
			Event.trigger('SwitchModule', <Virtual/>);
		});
	},
	run: function() {
		var data = {
			title: 'asa',
			list: [{text: '测试1', event: function() {}}]
		}
		Interface.alert(data);
	},
	sheet: function() {
		var data = [{text: '删除', event: function() {}, color: 1}];
		Interface.sheet(data);
	},
	taskToggle: function(item, ev) {
		if (ev.currentTarget.checked) {
			return TaskHandle.complete(item._id, function(result) {
				if(result.code == 200) {
					item.is_completed = 1;
					this.setState(this.state);
				}
			}.bind(this));
		}

		TaskHandle.uncomplete(item._id, function(result) {
			if(result.code == 200) {
				item.is_completed = 0;
				this.setState(this.state);
			}
		}.bind(this));
	},
	transformResult: function(result) {
		var data = [];
		if(!result.data || !result.data.tasks) return [];
		result.data.tasks.forEach(function(item) {
			if(!data[item.plan]) data[item.plan] = [];
			data[item.plan].push(item);
		});
		return data;
	},
	componentDidMount: function() {
		TaskHandle.getMyTask(function(result) {
			this.state.source = this.transformResult(result);
			this.setState(this.state);
		}.bind(this));
	},
	getInitialState: function() {
		var list = [{text: '新建任务', event: function() {}}, {text: '新建任务列表', event: function() {}}];
		var headObject = {title: '文档内容', back: '后退', operat: {text: '+', list: list}};
		Interface.setHeader(headObject);

		return {source:[]};
	},
	render: function() {
		return (<div className="mytask_page wrap">
					{
						this.state.source[0] &&
						<SelectList title="任务池">
							{
								this.state.source[0].map(function(item) {
									return  <SwipeLi key={item._id}>
										        <div className="check"><CheckBox onChange={this.taskToggle.bind(this, item)} checked={!!item.is_completed} /></div>
												<div className="text" onClick={this.goto}>
													<div className="top_block">
														<span className="text">{item.title}</span>
														<span className={item.tip != '' ? 'tip' : null}>{Utils.formatDate(item.deadline, 'MM-DD')}</span>
													</div>
													<div className="bottom_block">
														<span className="brand">SmartCall</span>
													</div>
												</div>
												<div className="option">
													<input type="button" value="&#xe600;" data-lock="ignore" />
													<input type="button" value="&#xe604;" data-lock="ignore"/>
												</div>
											</SwipeLi>
								}.bind(this))
							}
						</SelectList>
					}
					{
						this.state.source[1] &&
						<SelectList title="今天">
							{
								this.state.source[1].map(function(item) {
									return  <SwipeLi key={item._id}>
												<div className="check"><CheckBox onChange={this.taskToggle.bind(this, item)} checked={!!item.is_completed} /></div>
												<div className="text" onClick={this.goto}>
													<div className="top_block">
														<span className="text">{item.title}</span>
														<span className={item.tip != '' ? 'tip' : null}>{Utils.formatDate(item.deadline, 'MM-DD')}</span>
													</div>
													<div className="bottom_block">
														<span className="brand">SmartCall</span>
													</div>
												</div>
												<div className="option">
													<input type="button" value="&#xe600;" data-lock="ignore" />
													<input type="button" value="&#xe604;" data-lock="ignore"/>
												</div>
											</SwipeLi>
								}.bind(this))
							}
						</SelectList>
					}
					{
						this.state.source[1] &&
						<SelectList title="接下来">
							{
								this.state.source[1].map(function(item) {
									return  <SwipeLi key={item._id}>
										<div className="check"><CheckBox onChange={this.taskToggle.bind(this, item)} checked={!!item.is_completed} /></div>
										<div className="text" onClick={this.goto}>
											<div className="top_block">
												<span className="text">{item.title}</span>
												<span className={item.tip != '' ? 'tip' : null}>{Utils.formatDate(item.deadline, 'MM-DD')}</span>
											</div>
											<div className="bottom_block">
												<span className="brand">SmartCall</span>
											</div>
										</div>
										<div className="option">
											<input type="button" value="&#xe600;" data-lock="ignore" />
											<input type="button" value="&#xe604;" data-lock="ignore"/>
										</div>
									</SwipeLi>
								}.bind(this))
							}
						</SelectList>
					}
					{
						this.state.source[1] &&
						<SelectList title="以后">
							{
								this.state.source[1].map(function(item) {
									return  <SwipeLi key={item._id}>
										<div className="check"><CheckBox onChange={this.taskToggle.bind(this, item)} checked={!!item.is_completed} /></div>
										<div className="text" onClick={this.goto}>
											<div className="top_block">
												<span className="text">{item.title}</span>
												<span className={item.tip != '' ? 'tip' : null}>{Utils.formatDate(item.deadline, 'MM-DD')}</span>
											</div>
											<div className="bottom_block">
												<span className="brand">SmartCall</span>
											</div>
										</div>
										<div className="option">
											<input type="button" value="&#xe600;" data-lock="ignore" />
											<input type="button" value="&#xe604;" data-lock="ignore"/>
										</div>
									</SwipeLi>
								}.bind(this))
							}
						</SelectList>
					}
				</div>);
	}
});