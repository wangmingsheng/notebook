module.exports = {
	submit: function(data) {
		var uri = data.uri || '';
		var method = data.method || 'GET';
			method = method.toUpperCase();

		var params = '';
		if (data.params) {
			if (data.params instanceof FormData || method == 'GET') {
				params = data.params;
			} else {
				params = JSON.stringify(data.params);
			}
		}

		var _url;
		if (data.realUri) {
			_url = uri;
		} else {
			_url = (data.api || Config.siteUrl.API) + uri;
		}

		_url += _url.indexOf('?') == -1 ? '?' + Interface.getToken() : '&' + Interface.getToken();

		var request = {
			url: _url,
			data: params,
			type: method,
			contentType: false,
			processData: typeof(data.processData) == 'undefined' ? true : data.processData,
			xhrFields: {
				withCredentials: true
			},
			beforeSend: function(xhr) {
				typeof(data.beforeSend) == 'function' && data.beforeSend(xhr);
				if (data.header) {
					/// Access-Token
					xhr.setRequestHeader(data.header.name, data.header.value);
				}
				if (data.button) {
					$(data.button).prop('disabled', true);
				}
			},
			success: function(result, fnType, xhr) {
				switch (result.code) {
					case 200:
					break;
					case 401:
					case 40018:
						//location.href = '/signin.html?error=' + result.code;
					break;
					default:
						/*var messge = Utils.getPromptInfo(result.code);
						Pubsub.publish('OpenPushMessage', {
							message: messge
						});*/
					break;
				}

				if (data.header) {
					data.callback(result, xhr.getResponseHeader(data.header.name));
				} else {
					data.callback(result);
				}
			},
			error: function(xhr) {
				//Pubsub.publish('OpenPushMessage', {
					// message: Utils.getPromptInfo(4000)
				//});
			},
			complete: function() {
				if (data.button) {
					$(data.button).prop('disabled', false);
				}
			}
		};

		if (typeof(data.xhr) == 'function') request.xhr = data.xhr;
		return $.ajax(request);
	},
	get: function(data) {
		data.method = 'GET';
		return this.submit(data);
	},
	post: function(data) {
		data.method = 'POST';
		return this.submit(data);
	},
	put: function(data) {
		data.method = 'PUT';
		return this.submit(data);
	},
	delete: function(data) {
		data.method = 'DELETE';
		return this.submit(data);
	}
};