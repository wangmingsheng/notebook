var TaskHandle = require('../../handle/teamwork/Task');
var CheckBox = require('../../components/CheckBox');
var SwipeLi = require('../../components/SwipeLi');
var SelectList = require('./components/SelectList');
var ProjectData = require('../../data/Project');;
var SelectListRow = require('./components/SelectListRow');

module.exports = React.createClass({
	setHeader: function() {
		var headObject = {title: '我参与的任务', back: {text: '任务'}};
		Interface.setHeader(headObject);
	},
	dataRequest: function() {
		var now = Utils.now();
		this.state.tasks = {};

		TaskHandle.getParticipate(function(result) {
			if(!this.isMounted()) return null;
			if(result.code == 200) {
				this.state.loading = false;
				if (result.data && result.data.tasks) {
					this.state.source = [];
					this.state.source.push({_id: 'later', title: '已过期'});
					this.state.tasks.later = [];

					result.data.tasks.map(function(item) {
						if(!this.state.tasks[item.project]) {
							this.state.tasks[item.project] = [];
							this.state.source.push({_id: item.project, title: ProjectData.source[item.project] && ProjectData.source[item.project].name});
						}

						if (item.deadline != 0 && item.deadline < now) {
							this.state.tasks['later'].push(item);
						} else {
							this.state.tasks[item.project].push(item);
						}
					}.bind(this));

					return this.setState({source: this.state.source}, Interface.webEndRefresh);
				}
			}
			Interface.webEndRefresh();
		}.bind(this));
	},
	componentDidMount: function() {
		this.setHeader();
		this.dataRequest();
		Event.on('webBeginRefresh', this.dataRequest);

	},
	componentWillUnmount: function() {
		Event.off('webBeginRefresh', this.dataRequest);
	},
	getInitialState: function() {
		return {source: [], tasks: {}, loading: true};
	},
	render: function() {
		if(this.state.loading) return null;
		var now = Utils.now();
		return <div className="joined_task_page">
					{this.state.source.map(function(item) {
						if (this.state.tasks[item._id].length == 0) return null;

						return <SelectList title={item.title} key={item._id}>
									{this.state.tasks[item._id].map(function(task) {
										var tipName = ['tip'];
										if(now > task.deadline) tipName.push('later');
										return <li key={task._id}>
											<SwipeLi>
												<SelectListRow item={item} />
											</SwipeLi>
										</li>;
									}.bind(this))}
								</SelectList>
					}.bind(this))}
			{
				this.state.source.length > 0 ? null: <div className="full_page warning">暂无任务</div>
			}
			</div>
	}
});
