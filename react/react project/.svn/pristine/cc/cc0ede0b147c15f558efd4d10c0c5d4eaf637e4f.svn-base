var SelectList = require('../../components/SelectList');
var SwipeLi = require('../../components/SwipeLi');
var TaskHandle = require('../../handle/teamwork/Task');
var ModuleManage = require('../Manage');

var textData =[
	[
		{ text: '针对每一次通话加入后处理时间', tip: '10月16日', brand: 'SmartCall'},
		{ text: '如果关心某个同事的任务情况，可以把他添加到左侧的关注列表中', tip: '', brand: 'SmartCall'}
	],
	[
		{ text: '针对每一次通话加入后处理时间', tip: '本周二', brand: 'SmartCall'},
		{ text: '如果关心某个同事的任务情况，可以把他添加到左侧的关注列表中', tip: '', brand: 'SmartCall Helper'}
	],
	[
		{ text: '图表中的数据导出', tip: '', brand: 'SmartCall'},
		{ text: '统计图标/工单', tip: '', brand: 'SmartCall Helper'}
	]
];
module.exports = React.createClass({
	liCount: 0,
	goto: function() {
		Utils.setUrl('/module2');
		ModuleManage.getModule('module2', function(Virtual) {
			Event.trigger('SwitchModule', <Virtual/>);
		});
	},
	run: function() {
		var data = {
			title: 'asa',
			list: [
				{
					text: '测试1', event: function() {
				}
				},
				{
					text: '测试2', event: function() {
				}
				}
			]
		}
		Interface.alert(data);
	},
	sheet: function() {
		var data = [
			{
				text: '新建任务', event: function() { /*跳到新建任务模块 */
			}
			},
			{
				text: '新建任务列表', event: function() {
			}
			},
			{
				text: '删除', evnet: function() {
			}, color: '1'
			}
		];
		Interface.sheet(data);
	},
	dateTransform: function(time) {
		var date = new Date(time * 1000);
		var month = date.getMonth() + 1 < 10 ? '0'+(date.getMonth() + 1) : date.getMonth() + 1;
		var day = date.getDate();
		return month + '月' + day + '日';
	},
	transformResult: function(result) {
		var data = [];

		result.data.tasks.forEach(function(el) {
			if(data[el.plan] == undefined) data[el.plan] = [];
			data[el.plan].push(el);
		});
		return data;
	},
	componentDidMount: function() {
		TaskHandle.getMyTask(function(result) {
			this.state.resultData = this.transformResult(result);
			this.state.loading = 1;
			this.setState(this.state);
		}.bind(this));
	},
	getInitialState: function() {
		var list = [{
			text: '新建任务', event: function() { /* 新建任务的工作*/
				history.back();
				setTimeout(function() {
					alert('v=ss');
				}, 30);
			}
		}, {
			text: '新建任务列表', event: function() {
				// alert('新建任务列表');
			}
		}];
		var headObject = {title: '文档内容', back: '后退', operat: {text: '+', list: list}};
		Interface.setHeader(headObject);
		return {resultData:[],loading: 0};
	},
	render: function() {
		if(this.state.loading == 0) return null;
		return (<div className="mytask_page wrap">
			{
				this.state.resultData[0] == undefined ? null :
				<SelectList title="任务池">
					{
						this.state.resultData[0].map(function(el, index) {
							return  <SwipeLi key={index} ref={'li' + this.liCount++}>
								<label className="check"><input type="checkbox" /><i></i></label>
								<div className="text" onClick={this.goto}>
									<div className="top_block">
										<span className="text">{el.title}</span><span className={el.tip==''?'':'tip'}>{this.dateTransform(el.deadline)}</span>
									</div>
									<div className="bottom_block">
										<span className="brand">SmartCall</span>
									</div>
								</div>
								<div className="option">
									<input type="button" value="&#xe600;" /><input type="button" value="&#xe604;" />
								</div>
							</SwipeLi>
						}.bind(this))
					}
				</SelectList>
			}
			{
				this.state.resultData[1] == undefined ? null :
				<SelectList title="今天">
					{
						this.state.resultData[1].map(function(el, index) {
							return  <SwipeLi key={index}>
								<label className="check"><input type="checkbox" /><i></i></label>
								<div className="text">
									<div className="top_block">
										<span className="text">{el.title}</span><span className={el.tip==''?'':'tip'}>{this.dateTransform(el.deadline)}</span>
									</div>
									<div className="bottom_block">
										<span className="brand">SmartCall</span>
									</div>
								</div>
								<div className="option">
									<input type="button" value="&#xe600;" /><input type="button" value="&#xe604;" />
								</div>
							</SwipeLi>
						}.bind(this))
					}
				</SelectList>
			}
			{
				this.state.resultData[2] == undefined ? null :
				<SelectList title="接下来">
					{
						this.state.resultData[2].map(function(el, index) {
							return  <SwipeLi key={index}>
								<label className="check"><input type="checkbox" /><i></i></label>
								<div className="text">
									<div className="top_block" onClick={this.goto}>
										<span className="text">{el.title}</span><span className={el.tip==''?'':'tip'}>{this.dateTransform(el.deadline)}</span>
									</div>
									<div className="bottom_block">
										<span className="brand">SmartCall</span>
									</div>
								</div>
								<div className="option">
									<input type="button" value="&#xe600;" /><input type="button" value="&#xe604;" />
								</div>
							</SwipeLi>
						}.bind(this))
					}
				</SelectList>
			}
			{
				this.state.resultData[3] == undefined ? null :
					<SelectList title="以后">
					{
						this.state.resultData[3].map(function(el, index) {
							return  <SwipeLi key={index}>
								<label className="check"><input type="checkbox" /><i></i></label>
								<div className="text">
									<div className="top_block" onClick={this.goto}>
										<span className="text">{el.title}</span><span className={el.tip==''?'':'tip'}>{this.dateTransform(el.deadline)}</span>
									</div>
									<div className="bottom_block">
										<span className="brand">SmartCall</span>
									</div>
								</div>
								<div className="option">
									<input type="button" value="&#xe600;" /><input type="button" value="&#xe604;" />
								</div>
							</SwipeLi>
						}.bind(this))
					}
				</SelectList>
			}
		</div>);
	}
});