var TaskHandle = require('../../handle/teamwork/Task');
var MemberData = require('../../data/Member');

module.exports = React.createClass({
    dataRequest: function(flag) {
        var params = null;
        if(flag) params = {latest_stamp: this.state.lastTid};

        TaskHandle.getTaskComments(this.props.topicId, function(result) {
            Interface.webEndRefresh();
            if(result.code == 200) {
                this.state.loaded = true;
                this.state.lastTid = null;
                if(result.data && result.data.length > 20) {
                    this.state.lastTid = result.data.pop()._id;
                }

                if(!flag) return this.setState({source: result.data || []});

                this.state.loadWarming = false;
                this.state.source.push.apply(this.state.source, result.data);
                this.setState(this.state);
            }
        }.bind(this), params);
    },

    componentDidMount: function() {
        Event.on('webBeginRefresh', this.dataRequest);
        this.dataRequest();
    },
    componentWillUnmount: function() {
        Event.off('webBeginRefresh', this.dataRequest);
    },
    getUrl: function(id, type) {
        var other = '?medium=2';
        if(type) other = '?download=1';
        return Config.siteUrl.ATTACHMENT + '/teams/'+ Config.elect_team +'/attachments/' + id + other;
    },
    voiceClick: function(e) {
        this.state.voicePlay = !this.state.voicePlay;
        var dom = $(e.currentTarget).find('audio')[0];
        if(!this.state.voicePlay) {
           return dom.pause();
        }
        dom.currentTime = 0;
        dom.play();
    },
    audioEnded: function(e) {

    },
    videoLoadState: function() {
        console.log('startLoading ')
    },
    loaded: function() {
        console.log('load video erro');
    },
    componentWillReceiveProps: function(nProps) {
        if (nProps.scrollBottom) {
            if(this.state.lastTid) {
                this.setState({loadWarming: true});
                this.dataRequest(true);
            }
        }
    },
    getInitialState: function() {
        return {source: [], voicePlay: false, loaded: false, lastTid: null, loadWarming: false};
    },
    render: function() {
        if(!this.state.loaded) return null;
        return <div className="chat">
            <ul>
                {
                    this.state.source.map(function(item, index) {
                        var data = MemberData.source[item.creator];
                        var attachment = null;
                        switch(item.body.attachment && item.body.attachment.assort) {
                            case null:
                                break;
                            case 0:
                                switch(item.body.attachment.ext) {
                                    case 'mp4':
                                        attachment =  <div className="video_box">
                                                <video controls="controls" onError={this.loaded}>
                                                    <source src={this.getUrl(item.body.attachment._id, 1)} />
                                                    <p>你的浏览器不支持此元素</p>
                                                </video>
                                        </div>;
                                        break;
                                    case 'mp3':
                                    case 'Wav':
                                        attachment =  <div className="voice_box">
                                            <div className="tag" style={{width: 40 + "%"}} onClick={this.voiceClick}>
                                                <i>&gt;&gt;</i>
                                                <audio controls="controls" onEnded={this.audioEnded}>
                                                    <source src={this.getUrl(item.body.attachment._id, 1)} />
                                                    <p>你的浏览器不支持此元素</p>
                                                </audio>
                                            </div>
                                            <span className="duration">15</span>
                                        </div>;
                                        break;
                                    default:
                                        attachment = <div className="download_box">
                                            <img src={"/assets/file_icons/" + item.body.attachment.ext + ".png"} alt=""/>
                                            <span className="message">
                                                <div className="title">{item.body.attachment.title}</div>
                                                <div className="size">{item.body.attachment.size/1000 + 'KB'}</div>
                                            </span>
                                            <i className="operate"><a href={this.getUrl(item.body.attachment._id, 1)}></a></i>
                                        </div>;
                                }
                                break;
                            case 1:
                                attachment = <img src={this.getUrl(item.body.attachment._id)} alt=""/>;
                                break;
                            case 2:
                                break;
                            case 3:
                                break;

                        }
                        return <li key={index}>
                            <i className="avatar"><img src={data.avatar} /></i>
                            <div className="content">
                                <div className="owner_info">
                                    <span>{data.display_name}</span>
                                    <label>{Utils.formatDate(item.create_time, 'YYYY年MM月DD日')}</label>
                                    <label>{Utils.filterHHmm00(Utils.formatDate(item.create_time, 'hh:mm'))}</label>
                                </div>
                                {attachment}
                                <p>{item.body.content}</p>
                            </div>
                        </li>
                    }.bind(this))
                }
            </ul>
            {
                !this.state.loadWarming ? null : <div className="load_warming">加载中...</div>
            }
            {
                this.state.source.length > 0 ? null : <div className="warning"><span>暂无评论</span></div>
            }
        </div>
    }
});
