var interface;
var triggerEvent = {header: {}, other: {}};
var triggerIds = 0;
if (window.IOS) interface = window.IOS;

window.trigger = function(eventName) {
	var type = eventName.split('_')[0];
	if (type == 'HEADER') {
		return typeof(triggerEvent.header[eventName]) == 'function' && triggerEvent.header[eventName]();
	}

	var result = typeof(triggerEvent.other[eventName]) == 'function' && triggerEvent.other[eventName]();
	triggerEvent.other = {};
	return result;
}

function formatObject(data, isHeader) {
	if (!data || typeof(data.event) != 'function') return data;
	var key = (isHeader ? 'HEADER' : 'OTHER') + '_EVENT_' + ++triggerIds;

	if (isHeader)
		triggerEvent.header[key] = data.event;
	else 
		triggerEvent.other[key] = data.event;

	data.event = key;
	return data;
}

function formatList(data, isHeader) {
	if (data instanceof Array) {
		return data.map(function(item) {
			return formatObject(item, isHeader);
		}.bind(this));
	}
	return formatObject(data, isHeader);
}
	
module.exports = {
	getToken: function() {
		if (!interface) return null;
		return 'access_token=' + interface.getToken();
	},
	getTeamId: function() {
		if (!interface) return null;
		return interface.getTeamId();
	},
	setHeader: function(data) {
		if (!interface) return null;
		triggerEvent.header = {};

		formatObject(data.operat, true);
		if (data.operat) formatList(data.operat.list, true);
		return interface.setHeader(data);
	},
	sheet: function(data) {
		if (!interface) return null;

		formatList(data);
		return interface.sheet(data);
	},
	alert: function(data) {
		if (!interface) return null;

		formatList(data.list);
		return interface.alert(data);
	}
};