var TaskHandle = require('../../handle/teamwork/Task');
var CheckBox = require('../../components/CheckBox');
var SwipeLi = require('../../components/SwipeLi');
var SelectList = require('../../components/SelectList');
var ProjectData = require('../../data/Project');;

module.exports = React.createClass({
	setHeader: function() {
		var headObject = {title: '我参与的任务', back: {text: '任务'}};
		Interface.setHeader(headObject);
	},
	taskToggle: function(item, e) {
		if (e.target.checked) {
			return TaskHandle.complete(item._id, function(result) {
				if(result.code == 200) {
					item.is_completed = 1;
					this.setState(this.state);
				}
			}.bind(this));
		}

		TaskHandle.uncomplete(item._id, function(result) {
			if(result.code == 200) {
				item.is_completed = 0;
				this.setState(this.state);
			}
		}.bind(this));
	},
	dataRequest: function() {
		var now = (new Date).getTime();
		this.state.tasks = {};

		TaskHandle.getParticipate(function(result) {
			if(result.code == 200) {
				this.state.loaded = true;
				if (result.data && result.data.tasks) {
					this.state.source = [];
					this.state.source.push({_id: 'later', title: '已过期'});
					this.state.tasks.later = [];

					result.data.tasks.map(function(item) {
						if(!this.state.tasks[item.project]) {
							this.state.tasks[item.project] = [];
							this.state.source.push({_id: item.project, title: ProjectData.source[item.project] && ProjectData.source[item.project].name});
						}

						if (item.deadline != 0 && item.deadline < now) {
							this.state.tasks['later'].push(item);
						} else {
							this.state.tasks[item.project].push(item);
						}
					}.bind(this));

					return this.setState({source: this.state.source}, Interface.webEndRefresh);
				}
			}
			Interface.webEndRefresh();
		}.bind(this));
	},
	componentDidMount: function() {
		this.setHeader();
		this.dataRequest();
		Event.on('webBeginRefresh', this.dataRequest);

	},
	componentWillUnmount: function() {
		Event.off('webBeginRefresh', this.dataRequest);
	},
	getInitialState: function() {
		return {source: [], tasks: {}, loaded: false};
	},
	render: function() {
		if(!this.state.loaded) return null;
		return <div className="joined_task_page">
					{this.state.source.map(function(item) {
						if (this.state.tasks[item._id].length == 0) return null;

						return <SelectList title={item.title} key={item._id}>
									{this.state.tasks[item._id].map(function(task) {
										var now = parseInt((new Date()).getTime() / 1000);
										var tipName = ['tip'];
										if(now > task.deadline) tipName.push('later');
										return <SwipeLi key={task._id}>
													<div className="check"><CheckBox checked={!!task.is_completed} onChange={this.taskToggle.bind(this, task)} /></div>
													<div className="text" onClick={Utils.goto.bind(Utils, 'detail',task._id)}>
														<div className="top_block">
															<span className="text">{task.title}</span>
																{
																	!task.deadline ? null :
																	<span className={tipName.join(' ')}>{Utils.formatDate(task.deadline, 'MM月DD日')}</span>
																}
														</div>
													</div>
											</SwipeLi>;
									}.bind(this))}
								</SelectList>
					}.bind(this))}
			{
				this.state.source.length > 0 ? null: <div className="full_page warning">暂无任务</div>
			}
			</div>
	}
});
