var CheckBox = require('../../components/CheckBox');
var PushUpDialog = require('../../components/PushUpDialog');
var AcrossMbShow = require('../../components/AcrossMbShow');
var MulMember = require('./MulMember');
var Member = require('../../components/Member');
var ProjectData = require('../../data/Project');
var MemberData = require('../../data/Member');

var TaskHandle = require('../../handle/teamwork/Task');

module.exports = React.createClass({

	sheet: function() {
		var data = [
			{text: '移动', event: function() { this.run(); }.bind(this)},
			{text: '归档', event: function() { this.run(); }.bind(this)},
			{text: '删除', event: function() { this.run(); }.bind(this), color: 1}
			];
		Interface.sheet(data);
	},
	setHeader: function() {
		var headObject = {title: '任务详情', back: {text: '后退'}, operat: {text: '...', event: this.sheet}};
		Interface.setHeader(headObject);
	},
	pushDialog: function(type, data) {
		switch(type) {
			case 1:
				this.state.selectDialog = 1;
				break;
			case 2:
				this.state.source.following_ids = this.transHaXiToStr(data);
				this.state.selectDialog = false;
				this.setHeader();
				break;
			case 3:
				this.state.selectDialog = 3;
				break;
			case 4:
				var assign = this.transHaXiToStr(data);
				if(this.state.source.assign == assign) {
					this.setHeader();
					return ;
				}
				var param = {assign: assign};
				TaskHandle.modify(this.state.source._id, param, function(result) {
					if(result.code == 200) {
						this.state.selectDialog = false;
						this.state.source.assign = assign;
						this.setHeader();
						this.setState(this.state);
					}
				}.bind(this));
				break;
		}
		this.setState(this.state);
	},
	transHaXiToStr: function(obj) {
		var arr = [];
		for(var i in obj) {
			if(obj[i]) arr.push(i);
		}
		return arr.join(',');
	},
	transStrToHaXi: function(strData) {
		if(typeof(strData) != 'string') return {};
		var arr = strData.split(',');
		var result = {};
		arr.forEach(function(item) {
			if(!item) return false;
			result[item] = true;
		});
		return result;
	},
	isEmpty: function(obj) {
		for(var i in obj) {
			return false;
		}
		return true;
	},
	addSubtodo: function() {

	},
	taskToggle: function(item, ev) {
		if (ev.currentTarget.checked) {
			return TaskHandle.complete(item._id, function(result) {
				if(result.code == 200) {
					item.is_completed = 1;
					this.setState(this.state);
				}
			}.bind(this));
		}

		TaskHandle.uncomplete(item._id, function(result) {
			if(result.code == 200) {
				item.is_completed = 0;
				this.setState(this.state);
			}
		}.bind(this));
	},
	selectDate: function(ev) {
		$(ev.currentTarget).find('input').focus();
	},
	setDeadlineDate: function(e) {
		this.state.source.deadline = parseInt(Date.parse(e.currentTarget.value) / 1000 - Config.timeCut);
		this.setState(this.state);
	},
	componentDidMount: function() {
		TaskHandle.getOne(this.props.data.taskId, function(result) {
			if(result.code == 200) {
				this.setState({source: result.data || {}});
			}
		}.bind(this));
	},
	getInitialState: function() {
		this.setHeader();
		return {source: {}, selectDialog: false};
	},
	render: function() {
		if(Object.keys(this.state.source).length == 0 ) return false;

		return	(
			<div className="task_detail">
				<h4>
					<span>{ProjectData.source[ProjectData.currentId].name + '-' + this.props.data.tasklistName}</span>
					<i className="iconfont">&#xe606;</i>
				</h4>
				<div className="bk_wr">
					<div className="check_box">
						<div className="check">
							<CheckBox onChange={this.taskToggle.bind(this, this.state.source)} checked={!!this.state.source.is_completed}/>
						</div>
						<div className="text">
							<p>{this.state.source.title}</p>
							<ul>
								<li>
									<div onClick={this.pushDialog.bind(this, 3)}>
										<i className="iconfont">&#xe602;</i>
										<label>{this.state.source.assign && MemberData.source[this.state.source.assign].display_name}</label>
									</div>
									<div className="date_block" onClick={this.selectDate}>
										<input type="datetime-local" onBlur={this.setDeadlineDate} />
										<i className="iconfont">&#xe603;</i>
										<label>{!this.state.source.deadline ? null : Utils.formatDate(this.state.source.deadline, 'YYYY年MM月DD日')}</label>
										<label>{!this.state.source.deadline ? null : Utils.formatDate(this.state.source.deadline, 'HH:mm')}</label>
									</div>
								</li>
							</ul>
						</div>
					</div>
					<div className="description">
						<h5>任务描述</h5>
						<p className="detail">{this.state.source.desc}</p>
					</div>
					<div className="censor">
						<h5>检查项</h5>
						<ul>
							{
								this.state.source.subtodo &&
								this.state.source.subtodo.map(function(item, index) {
									return <li key={index}><CheckBox type="radio" text={item.title} /></li>
								})
							}
							<li className="add_subtodo" onClick={this.addSubtodo} ><a href="javascript:;">添加检查项</a></li>
						</ul>
					</div>
					<ul className="jump_option_list">
						<li onClick={this.pushDialog.bind(this, 1)}>
							<div className="option">
								<span>参与者</span>
							</div>
							<div className="right_block"><span className="tip"><AcrossMbShow data={this.transStrToHaXi(this.state.source.following_ids)} /></span><i className="icon">&#xe606;</i></div>
						</li>
						<li>
							<div className="option">
								<span>附件</span>
							</div>
							<div className="right_block"><span className="tip"></span><i className="icon">&#xe606;</i></div>
						</li>
					</ul>
				</div>
				<PushUpDialog position={this.state.selectDialog ==1 }>
				   <MulMember taskId={this.props.data.taskId} selected={this.transStrToHaXi(this.state.source.following_ids)} position={this.state.selectDialog == 1} callBack={this.pushDialog.bind(this, 2)}/>
			    </PushUpDialog>
				<PushUpDialog position={this.state.selectDialog ==3 }>
					<Member taskId={this.props.data.taskId} selected={this.transStrToHaXi(this.state.source.assign)} position={this.state.selectDialog == 3} callBack={this.pushDialog.bind(this, 4)}/>
				</PushUpDialog>
			</div>);
	}
});


