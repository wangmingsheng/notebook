var ModuleManage = require('../modules/Manage');
var MemberData = require('../data/Member');
var ProjectData = require('../data/Project');
var TaskHandle = require('../handle/teamwork/Task');
var moduleIndex = 0;

module.exports = React.createClass({
	isSwitch: false,
	create: function(module) {
		if (!module) return {module: null, key: ++moduleIndex};
		return {module: module, key: 'pre' + ++moduleIndex};
	},
	switchModule: function(module, direction) {
		this.isSwitch = true;
		Utils.screenState(true);

		this.setState({next: this.create(module)});
		var nextCss = {transition: 'left .4s'};
		if (direction) nextCss.left = '-100%';
		var nextP = $(this.refs.next).css(nextCss);

		setTimeout(function() {
			var current = $(this.refs.current);
			var next = $(this.refs.next);
			current.css('left', direction ? '100%' : '-100%');
			next.css('left', '0%');
			next.on('transitionend', function() {
				this.isSwitch = false;
				Utils.screenState(false);
				next.off('transitionend');

				nextP.css('transition', null);
				this.setState({current: this.state.next, next: this.create()});
			}.bind(this));
		}.bind(this));
	},
	preventEvent: function(e) {
		if(!Config.locked) return true;
		e.stopPropagation();
	},
	lockedEvent: function(e) {
		if(!Config.locked) return true;
		e.preventDefault();
	},
	backEvent: function(e) {
		if(!Config.locked || $(e.target).is('[data-lock]') || $(e.target).parents().filter('[data-lock]').length > 0) return true;
		e.preventDefault();
		e.stopPropagation();
		Event.trigger('ReleaseLock');
	},
	getModule: function(callback) {
		var param = location.pathname.replace(Config.prevUrl, '').replace('/', '').split('/');
		var paramKey = param.shift();
		callback({module: ModuleManage.getModule(paramKey), param: param});
	},
	componentDidMount: function() {
		var objWindow = $(window);

		ProjectData.currentId = 'acbcd47bebedb85bf57b3d7e';
		objWindow.on('popstate', function(e) {
			this.getModule(function(module) {
				var Virtual = module.module;
				if (Config.backStateFinsh) {
					Config.backStateFinsh = false;
					this.state.current = this.create(<Virtual param={module.param} />);
					return this.forceUpdate();
				}
				this.switchModule(<Virtual param={module.param} />, true);
			}.bind(this));
		}.bind(this));

		window.addEventListener('touchmove', this.lockedEvent, true); // 锁定状态下屏幕上下滑动
		window.addEventListener('touchstart', this.preventEvent, true); // 锁定状态阻止事件冒泡

		// 锁定状态下回滚
		window.addEventListener('click', this.backEvent, true);
		window.addEventListener('touchstart', this.backEvent, true);

		Event.on('SwitchModule', function(module, param, driection) {
			if (this.isSwitch) return false;
			var Virtual = ModuleManage.getModule(module);

			setTimeout(function() { this.switchModule(<Virtual param={param}/>, driection); }.bind(this));
		}.bind(this));

		this.getModule(function(module) {
			var Virtual = module.module;
			Config.elect_team = Interface.getTeamId();
			if (!Config.elect_team) {
				var params = {name: '13655022584', password: '545c517179861604'};
				return TaskHandle.login(params, function(result) {
					if(result.code == 200) {
						Config.elect_team = result.data.elect_team;
						MemberData.getList(Config.elect_team);
						ProjectData.getSource(function() {
							this.setState({current: this.create(<Virtual param={module.param} />)})
						}.bind(this));
					}
				}.bind(this));
			}
			Config.accessToken = Interface.getToken();
			ProjectData.getSource();
			MemberData.getList(Config.elect_team);
			this.setState({current: this.create(<Virtual param={module.param} />)});
		}.bind(this));
	},
	getInitialState: function() {
		//Config.elect_team = Interface.getTeamId();
		return {
			current: this.create(),
			next: this.create()
		};
	},
	render: function() {
		return (<div className="module_box">
					<div className="module_current" ref="current" key={this.state.current.key}>
						{this.state.current.module}
					</div>
					<div className="module_next" ref="next" key={this.state.next.key}>
						{this.state.next.module}
					</div>
				</div>);
	}
});