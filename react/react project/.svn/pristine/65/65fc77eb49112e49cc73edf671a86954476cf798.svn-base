function DataFactory() {
	this.source = {};
	this.eventLister = new Array();
}

DataFactory.prototype = Object.create({}, {
	/// 事件绑定
	on: {value: function (eventType, func) {
		var pusher = {eventType: eventType, func: func};
		this.eventLister.push(pusher);
	}},

	/// 事件取消绑定
	off: {value: function (eventType, func) {
		for (var i = this.eventLister.length - 1; i >= 0; i--) {
			var currentFunc = this.eventLister[i].func;
			if (this.eventLister[i].eventType == eventType && !func) {
				this.eventLister.splice(i, 1);
			} else if(this.eventLister[i].eventType == eventType && currentFunc == func) {
				this.eventLister.splice(i, 1);
			}
		}
	}},

	/// 事件派发
	trigger: {value: function (eventType, data) {
		var data = Array.prototype.slice.call(arguments, 1);
		for (var i = this.eventLister.length - 1; i >= 0; i--) {
			if (this.eventLister[i].eventType == eventType) {
				this.eventLister[i].func.apply(null, data);
			}
		}
	}},

	/// 更新全部
	triggerAll: {value: function() {
		for (var i = this.eventLister.length - 1; i >= 0; i--) {
			this.eventLister[i].func.apply(null, arguments);
		}
	}}
});

module.exports = DataFactory;