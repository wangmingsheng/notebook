var SelectList = require('../../components/SelectList');
var SwipeLi = require('../../components/SwipeLi');
var TaskHandle = require('../../handle/teamwork/Task');
var ModuleManage = require('../Manage');
var PushUpDialog = require('../../components/PushUpDialog');
var Module2 = require('./Module2');
module.exports = React.createClass({
	goto: function() {
		Utils.setUrl('/module2');
		ModuleManage.getModule('module2', function(Virtual) {
			Event.trigger('SwitchModule', <Virtual/>);
		});
	},
	run: function() {
		var data = {
			title: 'asa',
			list: [
				{
					text: '测试1', event: function() {
				}
				},
				{
					text: '测试2', event: function() {
				}
				}
			]
		}
		Interface.alert(data);
	},
	sheet: function() {
		var data = [
			{
				text: '新建任务', event: function() { /*跳到新建任务模块 */
			}
			},
			{
				text: '新建任务列表', event: function() {
			}
			},
			{
				text: '删除', evnet: function() {
			}, color: '1'
			}
		];
		Interface.sheet(data);
	},
	liCheckedEvent: function(taskId, ev) {
		TaskHandle.complete(taskId, function(result) {
			if(result.code == 200) $(ev.currentTarget).addClass('check');
		})
	},
	transformResult: function(result) {
		var data = [];

		result.data.tasks.forEach(function(el) {
			if(data[el.plan] == undefined) data[el.plan] = [];
			data[el.plan].push(el);
		});
		return data;
	},
	pushOutDialog: function() {
		this.refs.pushOutDialog.out();
	},
	pushInDialog: function() {
		this.refs.pushOutDialog.in();
	},
	componentDidMount: function() {
		result = {"code":200,
			"data":{"overdue":2,
				"tasks":[{"_id":"8a3e9025ea5de341f5a68ec5","assign":"8a3e9025ea5de341f5ee03c5","comment_count":0,"create_time":1474272763,"creator":"558a3e9025ea5de341f55e3d","deadline":0,"desc":"","entry":"82248a83e959ea8df5ee8e60","following_ids":"","is_archived":0,"is_completed":1,"is_deleted":0,"order":2,"plan":0,"priority":0,"project":"acbcd47bebedb85bf5ee577e","project_members":"","subtodo":null,"title":"22","topic":"82248a83e959ea8df57b8260","update_time":1474508821,"visibility":0},
					{"_id":"80de0cbad36ab607f5a68e48","assign":"8a3e9025ea5de341f5ee03c5","comment_count":0,"create_time":1474279404,"creator":"baa8740a819b2e7737f56e57","deadline":0,"desc":"","entry":"82248a83e959ea8df5ee8e60","following_ids":"","is_archived":0,"is_completed":0,"is_deleted":0,"order":3,"plan":1,"priority":0,"project":"acbcd47bebedb85bf5ee577e","project_members":"","subtodo":null,"title":"33","topic":"a9ceeb056a958632f57b82ae","update_time":1474452031,"visibility":0},
					{"_id":"8a3e9025ea5de341f5a67dc5","assign":"8a3e9025ea5de341f5ee03c5","comment_count":0,"create_time":1474445228,"creator":"8a3e9025ea5de341f5ee03c5","deadline":1474387200,"desc":"","entry":"acbcd47bebedb85bf5d6cb7e","following_ids":"","is_archived":0,"is_completed":0,"is_deleted":0,"order":1,"plan":1,"priority":0,"project":"816b135d630c6465f5d6829e","project_members":"","subtodo":null,"title":"针对每一次对话加入后处理时间","topic":"82248a83e959ea8df57b5760","update_time":1474448141,"visibility":1},
					{"_id":"8de05457647be46cf5a67de7","assign":"8a3e9025ea5de341f5ee03c5","comment_count":0,"create_time":1474448223,"creator":"8a3e9025ea5de341f5ee03c5","deadline":1474473600,"desc":"","entry":"acbcd47bebedb85bf5d6cb7e","following_ids":"","is_archived":0,"is_completed":0,"is_deleted":0,"order":2,"plan":1,"priority":0,"project":"816b135d630c6465f5d6829e","project_members":"","subtodo":null,"title":"如果关注某个","topic":"acbcd47bebedb85bf57b577e","update_time":1474452528,"visibility":1},
					{"_id":"80de0cbad36ab607f5a67d48","assign":"8a3e9025ea5de341f5ee03c5","comment_count":0,"create_time":1474448288,"creator":"8a3e9025ea5de341f5ee03c5","deadline":1474646400,"desc":"","entry":"314e37e7c790c95af5d6cb50","following_ids":"","is_archived":0,"is_completed":0,"is_deleted":0,"order":1,"plan":2,"priority":0,"project":"816b135d630c6465f5d6829e","project_members":"","subtodo":null,"title":"图表中的数据导出","topic":"a9ceeb056a958632f57b57ae","update_time":1474448323,"visibility":1}
					]}
		};
		this.setState({resultData: this.transformResult(result), loading: false});
/*		TaskHandle.getMyTask(function(result) {
		}.bind(this));*/
	},
	getInitialState: function() {
		var list = [{
			text: '新建任务', event: function() { /* 新建任务的工作*/
				history.back();
				setTimeout(function() {
					alert('v=ss');
				}, 30);
			}
		}, {
			text: '新建任务列表', event: function() {
				// alert('新建任务列表');
			}
		}];
		var headObject = {title: '文档内容', back: '后退', operat: {text: '+', list: list}};
		Interface.setHeader(headObject);
		return {resultData:[], loading: true};
	},
	render: function() {
		//if(this.state.loading) return null;
		return (<div className="mytask_page wrap">
			{
				this.state.resultData[0] == undefined ? null :
				<SelectList title="任务池">
					{
						this.state.resultData[0].map(function(el, index) {
							return  <SwipeLi key={index}>
								<label onTouchStart={this.liCheckedEvent.bind(this,el._id)}><input type="checkbox" /><i></i></label>
								<div className="text">
									<div className="top_block" onClick={this.pushInDialog}>
										<span className="text">{el.title}</span><span className={el.tip==''?'':'tip'}>{Utils.formatDate(el.deadline, 'MM-DD')}</span>
									</div>
									<div className="bottom_block" onClick={this.pushOutDialog}>
										<span className="brand" >SmartCall</span>
									</div>
								</div>
								<div className="option">
									<input type="button" value="&#xe600;" /><input type="button" value="&#xe604;" />
								</div>
							</SwipeLi>
						}.bind(this))
					}
				</SelectList>
			}
			{
				this.state.resultData[1] == undefined ? null :
				<SelectList title="今天">
					{
						this.state.resultData[1].map(function(el, index) {
							return  <SwipeLi key={index}>
								<label><input type="checkbox" /><i></i></label>
								<div className="text">
									<div className="top_block">
										<span className="text">{el.title}</span><span className={el.tip==''?'':'tip'}>{Utils.formatDate(el.deadline, 'MM-DD')}</span>
									</div>
									<div className="bottom_block">
										<span className="brand">SmartCall</span>
									</div>
								</div>
								<div className="option">
									<input type="button" value="&#xe600;" /><input type="button" value="&#xe604;" />
								</div>
							</SwipeLi>
						}.bind(this))
					}
				</SelectList>
			}
			{
				this.state.resultData[2] == undefined ? null :
				<SelectList title="接下来">
					{
						this.state.resultData[2].map(function(el, index) {
							return  <SwipeLi key={index}>
								<label><input type="checkbox" /><i></i></label>
								<div className="text">
									<div className="top_block" onClick={this.goto}>
										<span className="text">{el.title}</span><span className={el.tip==''?'':'tip'}>{Utils.formatDate(el.deadline, 'MM-DD')}</span>
									</div>
									<div className="bottom_block">
										<span className="brand">SmartCall</span>
									</div>
								</div>
								<div className="option">
									<input type="button" value="&#xe600;" /><input type="button" value="&#xe604;" />
								</div>
							</SwipeLi>
						}.bind(this))
					}
				</SelectList>
			}
			{
				this.state.resultData[3] == undefined ? null :
					<SelectList title="以后">
					{
						this.state.resultData[3].map(function(el, index) {
							return  <SwipeLi key={index}>
								<label><input type="checkbox" /><i></i></label>
								<div className="text">
									<div className="top_block" onClick={this.goto}>
										<span className="text">{el.title}</span><span className={el.tip==''?'':'tip'}>{Utils.formatDate(el.deadline, 'MM-DD')}</span>
									</div>
									<div className="bottom_block">
										<span className="brand">SmartCall</span>
									</div>
								</div>
								<div className="option">
									<input type="button" value="&#xe600;" /><input type="button" value="&#xe604;" />
								</div>
							</SwipeLi>
						}.bind(this))
					}
				</SelectList>
			}
			<PushUpDialog ref="pushOutDialog">
				<Module2 callBack={this.pushInDialog}/>
			</PushUpDialog>
		</div>);
	}
});