var Task = require('../modules/task/Index');
var ModuleManage = require('../modules/Manage');
var moduleIndex = 0;

module.exports = React.createClass({
	isSwitch: false,
	create: function(module) {
		if (!module) return {module: null, key: null};
		return {module: module, key: 'pre' + ++moduleIndex};
	},
	switchModule: function(module, direction) {
		this.state.next = this.create(module);
		this.isSwitch = true;

		this.setState(this.state);
		var nextCss = {transition: 'left .4s'};
		if (direction) nextCss.left = '-100%';
		var nextP = $(this.refs.next).css(nextCss);

		setTimeout(function() {
			var current = $(this.refs.current);
			var next = $(this.refs.next);
			current.css('left', direction ? '100%' : '-100%');
			next.css('left', '0%');
			next.on('transitionend', function() {
				this.isSwitch = false;
				next.off('transitionend');

				nextP.css('transition', null);
				this.state.current = this.state.next;
				this.state.next = this.create();
				this.setState(this.state);
			}.bind(this));
		}.bind(this));
	},
	lockEvent: function(event) {
		if(Config.locked) {
			event.stopPropagation();
			event.preventDefault();
			Event.trigger('ReleaseLock');
		}
	},
	componentDidMount: function() {
		var objWindow = $(window);

		objWindow.on('popstate', function() {
			if (Config.isTouchBack) return delete Config.isTouchBack;
			var url = location.href.replace(location.origin, '');

			ModuleManage.getModule(url, function(Virtual) {
				this.switchModule(<Virtual />, true);
			}.bind(this));
		}.bind(this));

		document.addEventListener('touchstart', this.lockEvent, true);
		document.addEventListener('touchmove', function(event) {
			if(Config.locked) event.preventDefault();
		}, true);

		Event.on('TouchBack', function(url) {
			ModuleManage.getModule(url, function(Virtual) {
				this.state.current = this.create(<Virtual />);
				return this.setState(this.state);				
			}.bind(this));
		}.bind(this));

		Event.on('SwitchModule', function(module, driection) {
			if (this.isSwitch) return false;
			setTimeout(function() { this.switchModule(module, driection); }.bind(this));
		}.bind(this));
	},
	getInitialState: function() {
		this.touchObject = {startPosition: {}, endPosition: {}};
		Config.elect_team = Interface.getTeamId();
		return {
			current: this.create(<Task />),
			next: this.create()
		};
	},
	render: function() {
		return (<div className="module_box">
					<div className="module_current" ref="current" key={this.state.current.key}>
						{this.state.current.module}
					</div>
					<div className="module_next" ref="next" key={this.state.next.key}>
						{this.state.next.module}
					</div>
				</div>);
	}
});