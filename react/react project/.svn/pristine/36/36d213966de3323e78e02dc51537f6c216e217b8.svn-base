var SelectList = require('./components/SelectList');
var SwipeLi = require('../../components/SwipeLi');
var TaskHandle = require('../../handle/teamwork/Task');
var Loading = require('../../components/Loading');
var SelectListRow = require('./components/SelectListRow');
module.exports = React.createClass({
	changePlanResult: function(item, plan) {
		TaskHandle.changePlan(item._id, {plan: plan}, function(result) {
			if(result.code == 200) {
				Event.trigger('ReleaseLock');
				item.plan = plan;
				this.setState(this.state);
			}
		}.bind(this));
	},
	setPlan: function(item, index) {
		var data = {
			title: '计划优先级',
			list: [{text: '今天', event: this.changePlanResult.bind(this, item, 1)},
				{text: '接下来', event: this.changePlanResult.bind(this, item, 2)},
				{text: '以后', event: this.changePlanResult.bind(this, item, 3)},
				{text: '无',  event: this.changePlanResult.bind(this, item, 0)}
			]
		};
		Interface.alert(data);
	},
	selectDate: function(item, ev) {
         $(ev.currentTarget).next('input').focus().val(Utils.formatDate(item.deadline, 'YYYY-MM-DDTHH:mm'));
	},
	setDateState: function(item, ev) {
		var time = parseInt(new Date(ev.currentTarget.value).getTime() / 1000);
		TaskHandle.modify(item._id, {deadline: time}, function(result) {
			if(result.code == 200) {
				Event.trigger('ReleaseLock');
				item.deadline = time;
				this.setState(this.state);
			}
		}.bind(this))
	},
	dataRequest: function() {
		TaskHandle.getMyTask(function(result) {
			if(!this.isMounted()) return null;
			if(result.code == 200) {
				this.state.loading = false;
				this.state.source = result.data.tasks || [];
				return this.setState(this.state, Interface.webEndRefresh);
			}
			Interface.webEndRefresh();
		}.bind(this));
	},
	componentDidMount: function() {
		Event.on('webBeginRefresh', this.dataRequest);
		this.dataRequest();
	},
	componentWillUnmount: function() {
		Event.off('webBeginRefresh', this.dataRequest);
	},
	setHeader: function() {
		var headObject = {title: '我的任务', back: {text: '后退'}};
		Interface.setHeader(headObject);
	},
	getInitialState: function() {
		this.setHeader();
		return {source: [], loading: true};
	},
	render: function() {
		if(this.state.loading) return <Loading />;

		var list = {};
		this.state.source.forEach(function(item) {
			if(!list[item.plan]) list[item.plan] = [];
			list[item.plan].push(<li key={item._id}>
				<SwipeLi swipe={true}>
					<SelectListRow item={item} bottomBlock={true}>
						<input type="button" className="normal_font" value="&#xe600;" readOnly="readOnly" data-lock="ignore" onClick={this.setPlan.bind(this, item)} />
						<input type="button" className="normal_font" value="&#xe604;" readOnly="readOnly" data-lock="ignore" onClick={this.selectDate.bind(this, item)} />
						<input type="datetime-local" data-lock="ignore" onBlur={this.setDateState.bind(this, item)} />
					</SelectListRow>
				</SwipeLi>
			</li>);
			}.bind(this));
		return (<div className="mytask_page">
					{list[0] && <SelectList title="任务池">{list[0]}</SelectList>}
					{list[1] && <SelectList title="今天">{list[1]}</SelectList>}
					{list[2] && <SelectList title="接下来">{list[2]}</SelectList>}
					{list[3] && <SelectList title="以后">{list[3]}</SelectList>}
					{
						this.state.source.length > 0 ? null: <div className="full_page warning">暂无任务</div>
					}
				</div>);
	}
});