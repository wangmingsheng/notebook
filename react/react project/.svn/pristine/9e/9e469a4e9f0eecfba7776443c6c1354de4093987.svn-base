var MemberSelectList = require('../../components/MemberSelectList');
var SelectList = require('../../components/SelectList');
var TaskHandle = require('../../handle/teamwork/Task');
var CheckBox = require('../../components/CheckBox');
var ProjectData = require('../../data/Project');
var MemberData = require('../../data/Member');

module.exports = React.createClass({
	gotoMemberDetail: function(userId) {
		Interface.gotoViewUserInfo(userId);
	},
	setHeader: function(name) {
		var list = [{text: '新建任务', event: Utils.goto.bind(Utils, 'create')}, {text: '新建任务列表', event: Utils.goto.bind(Utils, 'createentry')}];
		var headObject = {title: name, back: {text: '后退'}, operat: {text: '+', list: list}};
		Interface.setHeader(headObject);
	},
	tabSwitch: function(type) {
		this.state.tabIndex = type;
		this.setState(this.state);
	},
	taskToggle: function(item, ev) {
		if (ev.currentTarget.checked) {
			return TaskHandle.complete(item._id, function(result) {
				if(result.code == 200) {
					item.is_completed = 1;
					this.setState(this.state);
				}
			}.bind(this));
		}

		TaskHandle.uncomplete(item._id, function(result) {
			if(result.code == 200) {
				item.is_completed = 0;
				this.setState(this.state);
			}
		}.bind(this));
	},
	dataRequestAjax: function() {
		TaskHandle.getOneProjectTask(ProjectData.currentId, function(result) {
			if(!this.isMounted()) return null;
			if(result.code == 200) {
				this.state.loaded = true;
				return this.setState({tasks: result.data.tasks || []}, Interface.webEndRefresh);
			}
			Interface.webEndRefresh();
		}.bind(this));
	},
	dataRequest: function() {
		switch(this.state.tabIndex) {
			case 1:
				this.dataRequestAjax();
				break;
			case 2:
				MemberData.refreshData(function() {
					Interface.webEndRefresh();
					this.setState(this.state);
				}.bind(this));
				break;
		}

	},
	componentDidMount: function() {
		Event.on('webBeginRefresh', this.dataRequest);
		this.dataRequestAjax();
	},
	componentWillUnmount: function() {
		Event.off('webBeginRefresh', this.dataRequest);
	},
	getInitialState: function() {
		ProjectData.currentId = location.href.split('/project/')[1];
		this.setHeader(ProjectData.source[ProjectData.currentId].name);
		return {entryList: ProjectData.source[ProjectData.currentId].entrys || [], tasks: [], memberIds: ProjectData.source[ProjectData.currentId].member_ids, tabIndex: 1, loaded: false};
	},
	render: function() {
		var resultTaskList = [];
		var taskObj = {};
		if(this.state.entryList.length > 0 && this.state.tasks.length > 0) {
			this.state.entryList.forEach(function(el) {
				var resultArr = [];
				this.state.tasks.map(function(item) {
					if(item.entry != el._id) return null;
					var now = parseInt((new Date()).getTime() / 1000);
					var tipName = null;
					var tipTime = null;
					if(item.deadline) {
						tipTime = Utils.formatDate(item.deadline, 'MM-DD');
						tipName = ['tip'];
						if(now > item.deadline) tipName.push('later');
						tipName= tipName.join(' ');
					}
					resultArr.push(<li key={item._id}>
						<div className="check"><CheckBox onChange={this.taskToggle.bind(this, item)} checked={!!item.is_completed} /></div>
						<div className="text">
							<div className="top_block">
								<span className="text">{item.title}</span>
								<span className={tipName}>{tipTime}</span>
							</div>
							<div className="touch_area" onClick={Utils.goto.bind(Utils, 'detail', item._id)}></div>
						</div>
					</li>);
				}.bind(this));
				taskObj[el.name] = resultArr;
			}.bind(this));
		}

		for(var taskName in taskObj) {
			if(taskObj[taskName].length > 0) resultTaskList.push(<SelectList key={taskName} title={taskName}>{taskObj[taskName]}</SelectList>);
		}
		if(resultTaskList.length == 0 && this.state.loaded) resultTaskList.push(<div className="full_page warning">暂无内容</div>);

		return <div className="default_project_page">
				<div className="tab_box">
					<ul>
						<li onClick={this.state.tabIndex != 1 && this.tabSwitch.bind(this, 1)} className={this.state.tabIndex == 1 ? 'bkg' : null}><label>任务</label></li>
						<li onClick={this.state.tabIndex != 2 && this.tabSwitch.bind(this, 2)} className={this.state.tabIndex == 2 ? 'bkg' : null}><label>成员</label></li>
						<li onClick={this.state.tabIndex != 3 && this.tabSwitch.bind(this, 3)} className={this.state.tabIndex == 3 ? 'bkg' : null}><label>统计</label></li>
					</ul>
				</div>
				<div className="scroll_box">
					{this.state.tabIndex != 1 ? null : resultTaskList}
					{this.state.tabIndex != 2 ? null : <MemberSelectList source={MemberData.getCollect(this.state.memberIds)} type="click" callBack={this.gotoMemberDetail}/>}
					{this.state.tabIndex != 3 ? null : <div></div>}
				</div>
		</div>
	}
});
