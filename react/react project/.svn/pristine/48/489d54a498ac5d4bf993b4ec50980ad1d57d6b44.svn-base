var CheckBox = require('../../components/CheckBox');
var PushUpDialog = require('../../components/PushUpDialog');
var AcrossMbShow = require('../../components/AcrossMbShow');
var Loading = require('../../components/Loading');

var ProjectData = require('../../data/Project');
var MemberData = require('../../data/Member');
var TaskHandle = require('../../handle/teamwork/Task');

var MulMember = require('./components/MulMember');
var Discuss = require('./components/Discuss');
var SingelMember = require('./components/SingelMember');
var TaskDescEdit = require('./components/TaskDescEdit');
var TaskAttachment = require('./components/TaskAttachment');

module.exports = React.createClass({
	moveTO: function(item) {
		var param = {
			entry: item._id,
			project: item.project
		};

		TaskHandle.moveToOther(this.state.taskId, param, function(result) {
			if(result.code == 200) {
				this.state.entryName = item.name;
				this.state.source.project = item.project;
				this.state.source.entry = item._id;
				return this.setState(this.state);
			}
		}.bind(this));
	},
	selectMoveEntry: function(project) {
		var data = ProjectData.source[project].entrys.map(function(item) {
			return {text: item.name, event: this.moveTO.bind(this, item)}
		}.bind(this));
		Interface.sheet(data);
	},
	selectMoveProject: function() {
		var data = [];
		ProjectData.list.forEach(function(item) {
			if(item._id == ProjectData.currentId) return null;
			data.push({text: item.name, event: this.selectMoveEntry.bind(this, item._id)});
		}.bind(this));
		Interface.sheet(data);
	},
	archive: function() {
		TaskHandle.archive(this.state.source._id, function(result) {
			if(result.code == 200) {
				Interface.alert('归档成功');
				return ;
			}
			Interface.alert('抱歉，任务检查项未完成，不能归档')
		}.bind(this));
	},
	delete: function() {
		TaskHandle.delete(this.state.source._id, function(result) {
			if(result.code == 200) {
				Interface.alert('删除成功');
				history.back();
				return ;
			}
			Interface.alert('删除失败:' + result.code.toString())
		}.bind(this));
	},
	option: function() {
		var data = [
			{text: '移动', event: this.selectMoveProject},
			{text: '归档', event: this.archive},
			{text: '删除', event: this.delete, color: 1}
			];
		this.closeDateTimeDialog();
		Interface.sheet(data);
	},
	setHeader: function() {
		var headObject = {
		    title: '任务详情',
            back: {text: '后退', event: function() {
                this.closeDateTimeDialog();
                history.back();
            }.bind(this)},
            operat: {text: '...', event: this.option}
		};
		Interface.setHeader(headObject);
	},
	pushDialog: function(type, data) {
		switch(type) {
			case 'followerOut':
			case 'assignOut':
			case 'descriptionOut':
			case 'attachmentOut':
				Interface.closeChatBar();
				break;
			case 'followerIn':
				data && (this.state.source.following_ids = Utils.transHaXiToStr(data));
				this.setHeader();
				Interface.setChatBar(this.state.taskId);
				break;
			case 'assignIn':
				data && (this.state.source.assign = Utils.transHaXiToStr(data));
				this.setHeader();
				Interface.setChatBar(this.state.taskId);
				break;
			case 'descriptionIn':
				(data != undefined) && (this.state.source.desc = data);
				this.setHeader();
				Interface.setChatBar(this.state.taskId);
				break;
			case 'attachmentIn':
				data && (this.state.source.attachment = data);
				this.setHeader();
				Interface.setChatBar(this.state.taskId);
				break;
		}
		this.state.selectDialog = type;
		this.setState(this.state);
	},
	transStrToHaXi: function(strData) {
		if(typeof(strData) != 'string') return {};
		var arr = strData.split(',');
		var result = {};
		arr.forEach(function(item) {
			if(!item) return false;
			result[item] = true;
		});
		return result;
	},
    closeDateTimeDialog: function() {
		if(!this.refs.dateTime) return null;
        if(this.state.dateBlurFlag) {
            return this.setState({dateBlurFlag: false}, this.refs.dateTime.blur.bind(this.refs.dateTime));

        }
		this.refs.dateTime.blur();
    },
	taskToggle: function(ev) {
		if (ev.currentTarget.checked) {
			return TaskHandle.complete(this.state.source._id, function(result) {
				if(result.code == 200) {
					this.state.source.is_completed = 1;
					this.setState(this.state);
				}
			}.bind(this));
		}

		TaskHandle.uncomplete(this.state.source._id, function(result) {
			if(result.code == 200) {
				this.state.source.is_completed = 0;
				this.setState(this.state);
			}
		}.bind(this));
	},
	subTodoToggle: function(item, ev) {
		if (ev.currentTarget.checked) {
			return TaskHandle.completeSubtodo(this.state.source._id, item._id, function(result) {
				if(result.code == 200) {
					item.complete = 1;
					this.setState(this.state);
				}
			}.bind(this));
		}

		TaskHandle.uncompleteSubtodo(this.state.source._id, item._id, function(result) {
			if(result.code == 200) {
				item.complete = 0;
				this.setState(this.state);
			}
		}.bind(this));
	},
	dateChange: function(e) {
		this.state.source.defaultTime = e.currentTarget.value;
		this.setState(this.state);
	},
	selectDate: function(ev) {
        this.state.dateBlurFlag = true;
		this.state.source.defaultTime = Utils.formatDate(this.state.source.deadline, 'YYYY-MM-DDTHH:mm');
		if(!this.state.source.deadline) {
			this.state.source.defaultTime = Utils.formatDate((new Date()).getTime() / 1000 - Config.timeCut, 'YYYY-MM-DD') + 'T00' + ':00';
		}
		var $dom = $(ev.currentTarget).find('input');
		this.setState(this.state, $dom.focus.bind($dom));
	},
	setDeadlineDate: function(e) {
		var deadline = parseInt(Date.parse(e.currentTarget.value) / 1000 - Config.timeCut);
		TaskHandle.modify(this.state.source._id, {deadline: deadline}, function(result) {
			if(result.code == 200) {
				this.state.source.deadline = deadline;
				this.setState(this.state);
			}
		}.bind(this));
	},
	scrollEvent: function(e) {
		var bottom = e.currentTarget.scrollHeight - e.currentTarget.offsetHeight;
		if(e.currentTarget.scrollTop == bottom) {
			this.setState({scrollBottomCount: ++this.state.scrollBottomCount});
		}
	},
	dataRequest: function() {
		TaskHandle.getOne(this.state.taskId, function(result) {
			if(!this.isMounted()) return null;
			if(result.code == 200) {
				ProjectData.currentId = result.data.project;
				this.state.entryName = ProjectData.getEntryNameById(result.data.project, result.data.entry);
				this.state.source = result.data || {};
				this.state.source.defaultTime = '';
				return this.setState(this.state, Interface.webEndRefresh);
			}
			Interface.webEndRefresh();
		}.bind(this));
	},

	componentDidMount: function() {
		Interface.setChatBar(this.state.taskId);
		Event.on('webBeginRefresh', this.dataRequest);
		this.dataRequest();
	},
	componentWillUnmount: function() {
		Interface.closeChatBar();
		Event.off('webBeginRefresh', this.dataRequest);
	},
	getInitialState: function() {
		this.setHeader();
		var taskId = location.href.split('/detail/')[1];

		return {source: {}, selectDialog: '', entryName: '', scrollBottomCount: 0, taskId: taskId, dateBlurFlag: true };
	},
	render: function() {
		if(Object.keys(this.state.source).length == 0 ) return <Loading />;
		return	(
			<div className="task_detail">
				<h4 onClick={Utils.goto.bind(Utils, 'project', this.state.source.project)}>
					<span>{ProjectData.source[this.state.source.project].name + ' - ' + this.state.entryName}</span>
					<i className="iconfont">&#xe606;</i>
				</h4>
				<div className="bk_wr" onScroll={this.scrollEvent}>
					<div className="check_box">
						<div className="check">
							<CheckBox onChange={this.taskToggle} checked={!!this.state.source.is_completed}/>
						</div>
						<div className="text">
							<p>{this.state.source.title}</p>
							<ul>
								<li onClick={this.pushDialog.bind(this, 'assignOut')}>
									<i>&#xe602;</i>
									<label>{this.state.source.assign && MemberData.source[this.state.source.assign].display_name}</label>
								</li>
								<li className="date_block" onClick={this.selectDate}>
									<input ref="dateTime" type="datetime-local" value={this.state.source.defaultTime} onBlur={ this.state.dateBlurFlag && this.setDeadlineDate} onChange={this.dateChange} />
									<i>&#xe603;</i>
									<label>{!this.state.source.deadline ? null : Utils.formatDate(this.state.source.deadline, 'YYYY年MM月DD日')}</label>
									<label>{!this.state.source.deadline ? null : Utils.filterHHmm00(Utils.formatDate(this.state.source.deadline, 'HH:mm'))}</label>
								</li>
							</ul>
						</div>
					</div>
					<div className="xxx">
						<h5 style={{visibility: 'hidden', height: 0}}>' '</h5>
					</div>
					{
						<div className="description" onClick={this.pushDialog.bind(this, 'descriptionOut')}>
							<h5>任务描述</h5>
							<p className="detail" dangerouslySetInnerHTML={{__html: this.state.source.desc}}></p>
						</div>
					}
					{
						this.state.source.subtodo &&
						<div className="censor">
							<h5>检查项</h5>
							<ul>
								{
									this.state.source.subtodo.map(function(item, index) {
										return <li key={index}><CheckBox type="radio" text={item.title} onChange={this.subTodoToggle.bind(this, item)} checked={!!item.complete}/></li>
									}.bind(this))
								}
							</ul>
						</div>
					}
					<ul className="jump_option_list middle">
						<li onClick={this.pushDialog.bind(this, 'followerOut')}>
							<div className="option">
								<span>参与者</span>
							</div>
							<div className="right_block">
								<span className="tip">
									<AcrossMbShow data={this.transStrToHaXi(this.state.source.following_ids)} />
								</span>
								<i className="icon">&#xe606;</i>
							</div>
						</li>
						<li>
							<div className="option" onClick={this.pushDialog.bind(this, 'attachmentOut')}>
								<span>附件</span>
							</div>
							<div className="right_block"><span className="tip"></span><i className="icon">&#xe606;</i></div>
						</li>
					</ul>
					<div className="chat_box">
						<Discuss topicId={this.state.source.topic} scrollBottom={this.state.scrollBottomCount} />
					</div>
				</div>
				<PushUpDialog position={this.state.selectDialog == 'followerOut'}>
				   <MulMember taskId={this.state.source._id} selected={this.transStrToHaXi(this.state.source.following_ids)} position={this.state.selectDialog == 'followerOut'} callBack={this.pushDialog.bind(this, 'followerIn')}/>
			    </PushUpDialog>
				<PushUpDialog position={this.state.selectDialog == 'assignOut' }>
					<SingelMember taskId={this.state.source._id} selected={this.transStrToHaXi(this.state.source.assign)} position={this.state.selectDialog == 'assignOut'} callBack={this.pushDialog.bind(this, 'assignIn')}/>
				</PushUpDialog>
				<PushUpDialog position={this.state.selectDialog == 'descriptionOut'}>
					<TaskDescEdit taskId={this.state.source._id} data={this.state.source.desc} callBack={this.pushDialog.bind(this, 'descriptionIn')} position={this.state.selectDialog == 'descriptionOut'}/>
				</PushUpDialog>
				<PushUpDialog position={this.state.selectDialog == 'attachmentOut'}>
					<TaskAttachment taskId={this.state.source._id} callBack={this.pushDialog.bind(this, 'attachmentIn')} position={this.state.selectDialog == 'attachmentOut'}/>
				</PushUpDialog>
			</div>);
	}
});


