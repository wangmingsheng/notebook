var SelectList = require('../../components/SelectList');
var CheckBox = require('../../components/CheckBox');
var SwipeLi = require('../../components/SwipeLi');
var TaskHandle = require('../../handle/teamwork/Task');
var ModuleManage = require('../Manage');

module.exports = React.createClass({
	goto: function() {
		Utils.setUrl('/module4');
		ModuleManage.getModule('module4', function(Virtual) {
			Event.trigger('SwitchModule', <Virtual/>);
		});
	},
	run: function() {
		var data = {
			title: '计划优先级',
			list: [{text: '今天', event: function() {}},
				{text: '接下来', event: function() {}},
				{text: '以后', event: function() {}},
				{text: '无', event: function() {}}
			]
		};
		Interface.alert(data);
	},
	sheet: function() {
		var data = [{text: '删除', event: function() { this.run(); }.bind(this), color: 1}];
		Interface.sheet(data);
	},
	dateSelect: function(ev) {
		$(ev.target).attr('type', 'date');
	},
	changePlanResult: function(item, plan) {
		TaskHandle.changePlan(item._id, {plan: plan}, function(result) {
			if(result.code == 200) {
				Event.trigger('ReleaseLock');
				item.plan = plan;
				this.setState(this.state);
			}
		}.bind(this));
	},
	setPlan: function(item, index) {
		var data = {
			title: '计划优先级',
			list: [{text: '今天', event: this.changePlanResult.bind(this, item, 1)},
				{text: '接下来', event: this.changePlanResult.bind(this, item, 1)},
				{text: '以后', event: this.changePlanResult.bind(this, item, 1)},
				{text: '无',  event: this.changePlanResult.bind(this, item, 1)}
			]
		};
		Interface.alert(data);
	},
	taskToggle: function(item, ev) {
		if (ev.currentTarget.checked) {
			return TaskHandle.complete(item._id, function(result) {
				if(result.code == 200) {
					item.is_completed = 1;
					this.setState(this.state);
				}
			}.bind(this));
		}

		TaskHandle.uncomplete(item._id, function(result) {
			if(result.code == 200) {
				item.is_completed = 0;
				this.setState(this.state);
			}
		}.bind(this));
	},
	componentDidMount: function() {
		TaskHandle.getMyTask(function(result) {
			this.state.source = result.data.tasks || [];
			this.setState(this.state);
		}.bind(this));
	},
	getInitialState: function() {
		var list = [{text: '新建任务', event: function() { history.back(); }}, {text: '新建任务列表', event: function() {}}];
		var headObject = {title: '文档内容', back: '后退', operat: {text: '+', list: list}};
		Interface.setHeader(headObject);

		return {source: []};
	},
	render: function() {
		var now = (new Date()).getTime();
		var list = {};
		this.state.source.forEach(function(item) {
			var tipName = ['tip'];
			if(now > item.deadline) tipName.push('later');
			if(!list[item.plan]) list[item.plan] = [];
			list[item.plan].push(<SwipeLi key={item._id}>
				<div className="check"><CheckBox onChange={this.taskToggle.bind(this, item)} checked={!!item.is_completed} /></div>
				<div className="text" onClick={this.goto}>
					<div className="top_block">
						<span className="text">{item.title}</span>
						{
							!item.deadline ? null :
								<span className={tipName.join(' ')}>{Utils.formatDate(item.deadline, 'MM-DD')}</span>
						}
					</div>
					<div className="bottom_block">
						<span className="brand">SmartCall</span>
					</div>
				</div>
				<div className="option">
					<input type="button" value="&#xe600;" data-lock="ignore" onClick={this.setPlan.bind(this, item)} />
					<input type="button" value="&#xe604;" data-lock="ignore" onClick={this.dateSelect} />
				</div>
			</SwipeLi>);
		}.bind(this));

		return (<div className="mytask_page wrap">
					{list[0] && <SelectList title="任务池">{list[0]}</SelectList>}
					{list[1] && <SelectList title="任务池">{list[1]}</SelectList>}
					{list[2] && <SelectList title="任务池">{list[2]}</SelectList>}
					{list[3] && <SelectList title="任务池">{list[3]}</SelectList>}
				</div>);
	}
});