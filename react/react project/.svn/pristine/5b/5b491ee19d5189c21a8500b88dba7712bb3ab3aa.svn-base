var SwitchBox = require('../../components/SwitchBox');
var PushUpDialog = require('../../components/PushUpDialog');
var AcrossMbShow = require('../../components/AcrossMbShow');
var Member = require('../../components/Member');
var TaskHandle = require('../../handle/teamwork/Task');

module.exports = React.createClass({
	goto: function() {
		Utils.setUrl('/myjoinedtask');
		var ModuleManage = require('../Manage');
		ModuleManage.getModule('myjoinedtask', function(Virtual) {
			Event.trigger('SwitchModule', <Virtual/>);
		});
	},
	completed: function() {
		var param ={
			title: this.state.value.title,
			entry: '8de05457647be46cf57b82e7'
		};
		TaskHandle.create('82248a83e959ea8df57b3d60', param, function(result) {
			if(result.code == 200) {
				history.back();
			}
		});
	},
	pushOutDialog: function() {
		this.setState({selectDialog: true});
	},
	onlyPushInDialog: function() {
		this.setState({selectDialog: false});
		this.setHeader();
	},
	pushInDialog: function(selectedData) {
		this.state.selectDialog = false;
		this.state.selected  = $.extend({}, selectedData);
		this.setState(this.state);
		this.setHeader();
	},
	taskTittle: function(ev) {
		this.state.value.title = $(ev.currentTarget).val();
	},
	switchEvent: function() {
		this.state.value.visibility = !this.state.value.visibility;
		this.setState(this.state);
	},
	setHeader: function() {
		var headObject = {title: '新建任务11', back: {text: '后退'}, operat: {text: '完成', event: this.completed}};
		Interface.setHeader(headObject);
	},
	selectDate: function(ev) {
		$(ev.currentTarget).children('input').focus().val(Utils.formatDate(this.state.value.deadline, 'YYYY-MM-DDTHH:mm'));
	},
	setDeadlineDate: function(ev) {
		this.state.value.deadline = parseInt(new Date(ev.currentTarget.value).getTime() / 1000);
		this.setState(this.state);
	},
	getInitialState: function() {
		this.setHeader();
		var value = {assign: '', deadline: 0, title: "", entry: '8de05457647be46cf57b82e7', visibility: true};
		return {value:value, selectDialog: false, selected: {}};
	},
	render: function() {
		return <div className="newtask_page">
					<ul>
						<li><input type="text" placeholder="任务名称" onChange={this.taskTittle} /></li>
					</ul>
					<ul className="jump_option_list">
						<li onClick={this.pushOutDialog}>
                            <div className="option">
                                <span>分配给</span>
                                <div className="show"><AcrossMbShow data={this.state.selected} /></div>
                            </div>
                            <div className="right_block"><span className="tip"></span><i className="icon">&#xe606;</i></div>
                        </li>
						<li onClick={this.selectDate}>
							<div className="option">
								<span>截止时间</span>
								<div className="show">
									<span>{Utils.formatDate(this.state.value.deadline, 'YYYY-MM-DD')}</span>
								</div>
							</div>
							<input type="datetime-local" onBlur={this.setDeadlineDate} />
							<div className="right_block"><span className="tip"></span><i className="icon">&#xe606;</i></div>
						</li>
					</ul>
					<ul className="jump_option_list">
						<li><div className="option"><span>私密任务</span></div><span className="right_block"><SwitchBox checked={this.state.value.visibility} onChange={this.switchEvent}/></span></li>
					</ul>
					<PushUpDialog position={this.state.selectDialog}>
							<Member selected={this.state.value.assign} position={this.state.selectDialog} callBack={{completed: this.pushInDialog, back: this.onlyPushInDialog}}/>
					</PushUpDialog>
			</div>
	}
});
